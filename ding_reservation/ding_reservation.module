<?php
/**
 * @file
 * Bridge module, handling reservations for other modules.
 */

// Default interest period is ~six months.
define('DING_RESERVATION_DEFAULT_INTEREST_PERIOD', 183);
define('DING_RESERVATION_SUCCESS', 0);
define('DING_RESERVATION_ERROR', 1);
define('DING_RESERVATION_ERROR_NO_DEFAULT_BRANCH', 2);
define('DING_RESERVATION_ERROR_RESERVATION_EXISTS', 3);
// Material is not available.
define('DING_RESERVATION_ERROR_NOT_AVAILABLE', 4);
// Reservation is not allowed.
define('DING_RESERVATION_ERROR_NOT_ALLOWED', 5);

/**
 * Implementation of hook_menu().
 */
function ding_reservation_menu() {
  $items = array();

  $items['ding/reservation/%ting_local_id'] = array(
    'title' => 'Reserve item',
    'page callback' => 'ding_reservation_page_reserve_item',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'ding_reservation.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/ding/ding_reservation'] = array(
    'title' => 'Reservation settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_reservation_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_reservation.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function ding_reservation_form_ding_cart_list_form_alter(&$form, $form_state) {
  if (ding_provider_supports('reservation', 'options')) {
    $form['options'] = ding_provider_invoke('reservation', 'options', $form['account']['#value'], TRUE);
    $form['options']['#tree'] = TRUE;
  }

  $form['buttons']['reserve'] = array(
    '#type' => 'submit',
    '#op' => 'reserve',
    '#value' => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
    '#validate' => array('ding_reservation_ding_cart_list_form_validate'),
    '#submit' => array('ding_reservation_ding_cart_list_form_reserve'),
  );
}

/**
 * Cart form reservation validate handler.
 */
function ding_reservation_ding_cart_list_form_validate($form, &$form_state) {
  if (empty($form_state['values']['selected'])) {
    form_error($form['selected'], t('You must select some items.'));
  }
}

/**
 * Cart form reservation submit handler.
 */
function ding_reservation_ding_cart_list_form_reserve($form, &$form_state) {
  foreach (array_filter($form_state['values']['selected']) as $local_id) {
    $reservation = ding_provider_invoke('reservation', 'create', $form_state['values']['account'], $local_id, $form_state['values']['options'] ? $form_state['values']['options'] : array());

    // Parameter for the title to the t() function. Defined as a
    // variable to avoid having to define it in all the different
    // invocations below.
    $t_param = array('@title' => $form['cart']['#value'][$local_id]['title']);

    if (is_array($reservation) && isset($reservation['status'])) {
      switch ($reservation['status']) {
        case DING_RESERVATION_SUCCESS:
          drupal_set_message(t('Reservation of “@title” successful.', $t_param));
          // If reservation was successful, remove the item from the cart.
          ding_cart_remove_item($form_state['values']['account'], $local_id);
          break;
        case DING_PROVIDER_AUTH_BLOCKED:
          drupal_set_message(t('Reservation of “@title” failed: Your account is blocked.', $t_param), 'error');
          break;
        case DING_RESERVATION_ERROR_NOT_ALLOWED:
          drupal_set_message(t('Reservation of “@title” failed: Reservation not allowed.', $t_param), 'error');
          break;
        case DING_RESERVATION_ERROR_NOT_AVAILABLE:
          drupal_set_message(t('Reservation of “@title” failed: Not available for reservation.', $t_param), 'error');
          // If reservation is impossible, remove the item from the cart.
          ding_cart_remove_item($form_state['values']['account'], $local_id);
          break;
        case DING_RESERVATION_ERROR_RESERVATION_EXISTS:
          drupal_set_message(t('“@title” is already on your reservation list, and has been removed from your cart.', $t_param), 'warning');
          // If reservation is already made, remove the item from the cart.
          ding_cart_remove_item($form_state['values']['account'], $local_id);
          break;
        default:
          // If none of the cases above apply (and thus return the function,
          // skipping this part, provide a generic error message.
          drupal_set_message(t('Reservation of “@title” failed. Please try again later, and contact technical support if the problem persists.', $t_param), 'error');
      }
    }
  }
}

/**
 * Implementation of hook_ting_object_buttons().
 */
function ding_reservation_ting_object_buttons($object) {
  if (!empty($object->localId) && ting_object_is($object, 'reservable')) {
    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/ding_reservation.buttons.js');
    return l(t('Reserve now'), 'ding/reservation/' . $object->localId, array('attributes' => array('class' => 'reserve-now'), 'query' => drupal_get_destination()));
  }
}

/**
 * Implementation of hook_requirements().
 */
function ding_reservation_requirements($phase) {
  $requrements = array();
  if ($phase == 'runtime') {
    $reservation_provider = ding_provider_description('reservation');

    $requrements['ding_reservation'] = array(
      'title' => t('Ding reservation'),
      'severity' => $reservation_provider ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
      'value' => $reservation_provider,
      'description' => $reservation_provider ? t('OK'): t('No reservation provider active.'),
    );
  }

  return $requrements;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_reservation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_reservation_theme($existing, $type, $theme, $path) {
  return array(
    'ding_reservation_list_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ding_reservation.theme.inc',
    ),
  );
}

/**
 * Reservation details form.
 *
 * @todo Way too much logic in the theme function. Move some of it here.
 */
function ding_reservation_list_form($form_state, $account, $records) {
  // TODO: Move this variable.
  $cancel_fetchable = (boolean) variable_get('ding_library_user_cancel_fetchable_reservable', TRUE);
  $form = array();

  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  $form['reservations'] = array(
    '#type' => 'value',
    '#grouped' => array(),
    '#value' => array(),
  );

  $form['selected'] = array(
    '#tree' => TRUE,
  );

  if (is_array($records)) {
    foreach ($records as $reservation) {
      $form['reservations']['#value'][$reservation['id']] = $reservation;
      $form['reservations']['#grouped'][$reservation['status']][$reservation['id']] = $reservation;

      $form['selected'][$reservation['id']] = array(
        '#type' => 'checkbox',
        '#return_value' => $reservation['id'],
        '#disabled' => TRUE,
        '#disabled_text' => t('reservation cannot be cancelled'),
      );
      if ($reservation['status'] == 'active' || ($cancel_fetchable && $reservation['status'] == 'fetchable')) {
        $form['selected'][$reservation['id']]['#disabled'] = FALSE;
      }
    }
  }

  if (ding_provider_supports('reservation', 'update') && ding_provider_supports('reservation', 'options')) {
    $form['options'] = ding_provider_invoke('reservation', 'options', $account, FALSE);
    $form['options']['#tree'] = TRUE;

    $form['buttons']['update'] = array(
      '#type' => 'submit',
      '#value' => t('Save changes for selected reservations'),
      '#attributes' => array('class' => 'update-button'),
      '#submit' => array('ding_reservation_list_form_update'),
    );
  }
  $form['buttons']['remove'] = array(
    '#type' => 'submit',
    '#value' => t('Delete selected reservations'),
    '#attributes' => array('class' => 'cancel-button'),
    '#submit' => array('ding_reservation_list_form_remove'),
  );

  return $form;
}

/**
 * Form validation function.
 */
function ding_reservation_list_form_validate($form, &$form_state) {
  $selected = array_filter($form_state['values']['selected']);
  if (empty($selected)) {
    form_error($form['selected'], t('You must select some reservations.'));
  }
}

/**
 * Form submit handler.
 */
function ding_reservation_list_form_update($form, &$form_state) {
  ding_library_user_required();
  $reservation_ids = array_filter($form_state['values']['selected']);

  $result = ding_provider_invoke('reservation', 'update', $form_state['values']['account'], $reservation_ids, $form_state['values']['options']);
  foreach ($result as $reservation_id => $success) {
    if (is_string($success)) {
      $error_messages[] = $success;
    }
    elseif ($success) {
      $successes[] = $reservation_id;
    }
    else {
      $failures[] = $reservation_id;
    }
  }

  if (!empty($error_messages)) {
    foreach ($error_messages as $message) {
      drupal_set_message($message, 'warning');
    }
  }

  if ($successes && !$failures) {
    drupal_set_message(t('Reservations updated.'));
  }
  elseif ($failures && !$successes) {
    drupal_set_message(t('Could not update reservations.', 'error'));
  }
  elseif (empty($error_messages)) {
    drupal_set_message(t('Updated @ok_count reservations, @failed_count failed', array('@ok_count' => sizeof($successes), '@failed_count' => sizeof($failures))), 'warning');
  }
}

/**
 * Form submit handler.
 */
function ding_reservation_list_form_remove($form, &$form_state) {
  ding_library_user_required();
  $reservation_ids = array_filter($form_state['values']['selected']);
  $result = ding_provider_invoke('reservation', 'delete', $form_state['values']['account'], $reservation_ids);

  foreach ($reservation_ids as $reservation_id => $success) {
    if ($success) {
      $successes[] = $reservation_id;
    }
    else {
      $failures[] = $reservation_id;
    }
  }

  if (!empty($successes) && empty($failures)){
    drupal_set_message(t('Reservations deleted.'));
  }
  elseif (!empty($failures) && empty($successes)) {
    drupal_set_message(t('Could not delete reservations.', 'error'));
  }
  else {
    drupal_set_message(t('Deleted @ok_count reservations, @failed_count failed', array('@ok_count' => sizeof($successes), '@failed_count' => sizeof($failures))), 'error');
  }
}

/**
 * Implementation of hook_ting_object_is().
 */
function ding_reservation_ting_object_is($object, $class) {
  if ($class == 'reservable' || $class == 'cartable') {
    if (ting_object_is($object, 'online')) {
      // Online objects are never reservable. Ding should provide users
      // with direct access to these if possible.
      return FALSE;
    } else {
      $vars = ting_object_preprocess($object);
      // Objects which belong to the library holdings are reservable.
      // We cannot answer for anything else.
      if (in_array(strtolower($vars['ting_source']), array('bibliotekets materialer'))) {
        return TRUE;
      }
    }
  }
}

/**
 * Returns the site default interest period in days.
 */
function ding_reservation_default_interest_period() {
  return variable_get('ding_reservation_default_interest_period', DING_RESERVATION_DEFAULT_INTEREST_PERIOD);
}
