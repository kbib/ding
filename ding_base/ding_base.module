<?php

/**
 * @file
 * Base Ding module
 *
 * Provides date formats and other things shared by all Ding modules.
 */

/**
 * Implementation of hook_menu().
 */
function ding_base_menu() {
  $items['admin/settings/ding'] = array(
    'title' => 'Ding!',
    'description' => "Manage Ding! settings.",
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'ding_base_menu_block_page',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/settings/filters/ding_reset'] = array(
    'title' => 'Ding reset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_base_reset_filters_confirm_form'),
    'access arguments' => array('administer filters'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_date_format_types().
 */
function ding_base_date_format_types() {
  return array(
    'date_short' => t('Date only (short)'),
  );
}

/**
 * Implementation of hook_date_formats().
 *
 * @return
 *   An array of date formats with attributes 'type' (short, medium or long),
 *   'format' (the format string) and 'locales'.  The 'locales' attribute is an
 *   array of locales, which can include both 2 character language codes like
 *   'en', 'fr', but also 5 character language codes like 'en-gb' and 'en-us'.
 */
function ding_base_date_formats() {
  return array(
    array(
      'type' => 'date_short',
      'format' => 'Y-m-d',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'd-m-Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'm/d/Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'd/m/Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'Y/m/d',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'd.m.Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'M j Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'j M Y',
      'locales' => array(),
    ),
    array(
      'type' => 'date_short',
      'format' => 'Y M j',
      'locales' => array(),
    ),
  );
}

/**
 * Implementation of hook_default_oembedcore_preset().
 *
 * This implementation is partly handled outside of features as oembed exportables seem broken.
 */
function ding_base_default_oembedcore_preset() {
  $export = array();
  $preset = new stdClass;
  $preset->disabled = FALSE; /* Edit this to true to make a default preset disabled initially */
  $preset->name = 'standard';
  $preset->width = 650;
  $preset->height = 1000;
  $preset->conf = array(
    'disable_title' => FALSE,
  );

  $export['standard'] = $preset;
  return $export;
}

/**
 * Element validator. Checks that the value is a valid phone number.
 */
function ding_base_element_validate_phone_number($element, &$form_state) {
  if ($element['#value']) {
    $number = preg_replace('/\D+/', '', $element['#value']);
    if (strlen($number) != 8 || $number < 20000000) {
      form_error($element, t('Phone number must be 8 digits.'));
    }
    else {
      // If processed number was valid, set it as the correct value.
      form_set_value($element, $number, $form_state);
    }
  }
}

/**
 * Element validator. Checks that the value is a valid positive integer.
 */
function ding_base_element_validate_positive_integer($element, &$form_state) {
  if (!preg_match('/^\d+/', $element['#value']) || !($element['#value'] > 0)) {
    form_error($element, t('Valid positive number required.'));
  }
}

/**
 * Element validator. Checks that the date is in the future.
 *
 * Format of date should be: YYYY-MM-DD.
 */
function ding_base_element_validate_future_date(&$element, &$form_state) {
  if (!empty($element['#value']['date'])) {
    list($year, $month, $day) = explode('-', trim($element['#value']['date']));
    if (!checkdate($month, $day, $year)) {
      form_error($element, t('Invalid date'));
    }

    $timestamp = strtotime($element['#value']['date']);
    if ($timestamp <= $_SERVER['REQUEST_TIME']) {
      form_error($element, t('Date must be later than today.'));
    }
  }
}

/**
 * Clone of system_admin_menu_block_page().
 */
function ding_base_menu_block_page() {
  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $output = theme('admin_block_content', $content);
  }
  else {
    $output = t('No active ding modules have any settings.');
  }
  return $output;
}

/**
 * Reset filters confirm form.
 */
function ding_base_reset_filters_confirm_form() {
  // filter_formats only returns filters the user has access to, but we assume
  // that if you have access to the admin pages, you'll have access to all
  // filters.
  $formats = filter_formats();
  $question = t("Reset filters to Ding defaults?");
  $description = t("This will reset the %filter_1, %filter_2 and %filter_3 formats and the WYSIWYG setup associated with %filter_3 filter to default values.", array('%filter_1' => $formats[1]->name, '%filter_2' => $formats[2]->name, '%filter_3' => $formats[3]->name));

  return confirm_form(array(), $question, 'admin/settings/filters/ding_reset', $description, t('Reset'));
}

/**
 * Submit function for filter reset form.
 */
function ding_base_reset_filters_confirm_form_submit($form, &$form_state) {
  ding_base_setup_filters();
  $form_state['redirect'] = 'admin/settings/filters';
}

/**
 * Set input filters to standard configuration.
 */
function ding_base_setup_filters() {
  $formats = array(
    array(
      'format' => 1,
      'name' => 'Markdown',
      'roles' => ',1,2,3,4,',
      'cache' => 1,
      'filters' => array(
        'htmlLawed:0:10',
        "filter:2:0",
        "htmLawed:0:10",
        "markdown:0:10",
      ),
      'wysiwyg' => array('', NULL),
    ),
    array(
      'format' => 2,
      'name' => 'Full HTML',
      'roles' => ',,',
      'cache' => 1,
      'filters' => array(
        "image_resize_filter:0:1",
        "htmLawed:0:2",
        "oembed:0:3",
        "filter:2:4",
        "filter:3:5",
      ),
      'wysiwyg' => array('', NULL),
    ),
    array(
      'format' => 3,
      'name' => 'WYSIWYG',
      'roles' => ',3,4,',
      'cache' => 1,
      'filters' => array(
        "image_resize_filter:0:1",
        "htmLawed:0:2",
        "oembed:0:3",
        "filter:2:4",
    ),
      'wysiwyg' => array('tinymce', 'a:20:{s:7:"default";i:1;s:11:"user_choose";i:0;s:11:"show_toggle";i:1;s:5:"theme";s:8:"advanced";s:8:"language";s:2:"en";s:7:"buttons";a:5:{s:7:"default";a:22:{s:4:"bold";i:1;s:6:"italic";i:1;s:9:"underline";i:1;s:13:"strikethrough";i:1;s:11:"justifyleft";i:1;s:13:"justifycenter";i:1;s:12:"justifyright";i:1;s:7:"bullist";i:1;s:7:"numlist";i:1;s:7:"outdent";i:1;s:6:"indent";i:1;s:4:"undo";i:1;s:4:"redo";i:1;s:4:"link";i:1;s:6:"unlink";i:1;s:6:"anchor";i:1;s:5:"image";i:1;s:7:"cleanup";i:1;s:4:"code";i:1;s:2:"hr";i:1;s:5:"paste";i:1;s:7:"charmap";i:1;}s:4:"font";a:1:{s:12:"formatselect";i:1;}s:12:"inlinepopups";a:1:{s:12:"inlinepopups";i:1;}s:5:"style";a:1:{s:10:"styleprops";i:1;}s:5:"table";a:1:{s:13:"tablecontrols";i:1;}}s:11:"toolbar_loc";s:3:"top";s:13:"toolbar_align";s:4:"left";s:8:"path_loc";s:6:"bottom";s:8:"resizing";i:1;s:11:"verify_html";i:1;s:12:"preformatted";i:0;s:22:"convert_fonts_to_spans";i:1;s:17:"remove_linebreaks";i:1;s:23:"apply_source_formatting";i:1;s:27:"paste_auto_cleanup_on_paste";i:1;s:13:"block_formats";s:32:"p,address,pre,h2,h3,h4,h5,h6,div";s:11:"css_setting";s:4:"self";s:8:"css_path";s:45:"profiles/ding/themes/dynamo/style/wysiwyg.css";s:11:"css_classes";s:0:"";}'),
    ),
  );

  foreach ($formats as $format) {
    if (db_result(db_query("SELECT COUNT(format) FROM {filter_formats} WHERE format = %d", $format['format'])) == 0) {
      drupal_write_record('filter_formats', $format);
    }
    else {
      drupal_write_record('filter_formats', $format, 'format');
    }
    db_query("DELETE FROM {filters} WHERE format = %d", $format['format']);
    foreach ($format['filters'] as $def) {
      $tmp = explode(':', $def);
      $filter = array(
        'format' => $format['format'],
        'module' => $tmp[0],
        'delta' => $tmp[1],
        'weight' => $tmp[2],
      );
      drupal_write_record('filters', $filter);
    }
    db_query("DELETE FROM {wysiwyg} WHERE format = %d", $format['format']);
    db_query("INSERT INTO {wysiwyg} (format, editor, settings) VALUES (%d, '%s', '%s')", $format['format'], $format['wysiwyg'][0], $format['wysiwyg'][1]);
  }
  // Set better_formats.
  $types = array(
    'block',
    'comment',
    'node',
  );
  $rid_format = array(
    4 => 3,
    1 => 0,
    2 => 0,
  );
  $i = -25;
  foreach ($rid_format as $rid => $format) {
    db_query("DELETE FROM {better_formats_defaults} WHERE rid = %d", $rid);
    foreach ($types as $type) {
      db_query("INSERT INTO {better_formats_defaults} (rid, type, format, type_weight, weight) VALUES (%d, '%s', %d, %d, %d)", $rid, $type, $format, 1, $i++);
    }
  }
}

include_once('ding_base.features.inc');
