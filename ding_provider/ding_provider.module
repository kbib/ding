<?php

// $Id$

/**
 * Magic value for providers to return if not authenticated, md5('DING_PROVIDER_AUTH_REQUIRED').
 */
define('DING_PROVIDER_AUTH_REQUIRED', '9830f1673cd4295cfe742c1cf8933fa0');

/**
 * Implementation of hook_menu().
 */
function ding_provider_menu() {
  $items = array();

  $items['admin/settings/ding/ding_provider'] = array(
    'title' => 'Ding! provider',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_provider_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ding_provider.admin.inc',
  );

  $items['admin/settings/ding/ding_provider/%/settings'] = array(
    'title' => 'Ding! provider plugin settings',
    'page callback' => 'ding_provider_admin_plugin_settings_page',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'file' => 'ding_provider.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns a list of provider types.
 */
function _ding_provider_types() {
  return array(
    'user' => array(
      'name' => t('Users'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'loan' => array(
      'name' => t('Loans'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'reservation' => array(
      'name' => t('Reservations'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'availability' => array(
      'name' => t('Availability'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'booking' => array(
      'name' => t('Booking'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'debt' => array(
      'name' => t('Debt'),
      'current version' => 1,
      'minimum version' => 1
    ),
    'branch' => array(
      'name' => t('Branches'),
      'current version' => 1,
      'minimum version' => 1
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_user() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'authenticate',
      'logged in',
    ),
    'optional functions' => array(
      'authenticate finalize',
      'settings form',
      'library settings form',
      'password change',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_loan() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'get loans',
      'renew loans',
    ),
    'optional functions' => array(
      'settings form',
      'details',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_reservation() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'create',
      // 'update',
      'delete',
      'list',
      // 'exists',
    ),
    'optional functions' => array(
      'settings form',
      'details',
      'options',
      'update',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_availability() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'items',
    ),
    'optional functions' => array(
      'settings form',
      'details',
      'periodical',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_booking() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'create',
      'options',
      'list',
      'delete',
    ),
    'optional functions' => array(
      'settings form',
      'details',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_debt() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'list',
    ),
    'optional functions' => array(
      'settings form',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_PLUGIN().
 */
function ding_provider_ctools_plugin_branch() {
  return array(
    'cache' => TRUE,
    'process' => 'ding_provider_plugin_process',
    'defaults' => array(
      'version' => 1,
      'description' => '',
    ),
    'required functions' => array(
      'list',
    ),
    'optional functions' => array(
      'settings form',
    ),
  );
}

/**
 * Process function for plugins.
 *
 * Sets up some sensible defaults.
 */
function ding_provider_plugin_process(&$plugin, $info) {
  $function_base = $plugin['module'] . '_' . $plugin['plugin type'] . '_';
  if (isset($info['required functions'])) {
    foreach ($info['required functions'] as $name) {
      if (empty($plugin[$name])) {
        $function_name = $function_base . strtr($name, ' ', '_');
        if (function_exists($function_name)) {
          $plugin[$name] = $function_name;
        }
        else {
          // Plugin developer forgot to implement a required function.
          trigger_error(t('Ding @type provider plugin %plugin (%module module) does not implement %function', array('@type' => $info['type'], '%plugin' => $plugin['name'], '%function' => $name, '%module' => $plugin['module'])), E_USER_ERROR);
          // This disables this plugin. If plugin info is cached, this ensures
          // that this module isn't selected.
          $plugin['version'] = 0;
        }
      }
    }
  }
  if (isset($info['optional functions'])) {
    foreach ($info['optional functions'] as $name) {
      if (empty($plugin[$name])) {
        $function_name = $function_base . strtr($name, ' ', '_');
        if (function_exists($function_name)) {
          $plugin[$name] = $function_name;
        }
      }
    }
  }
}

/**
 * Check if we have a given provider.
 */
function ding_provider_exists($type) {
  return _ding_provider_get_plugin($type) ? TRUE : FALSE;
}

/**
 * Check if a provider support a given function.
 */
function ding_provider_supports($type, $function) {
  $plugin = _ding_provider_get_plugin($type);
  if ($plugin) {
    if (ding_provider_plugin_load_function($type, $plugin['name'], $function)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns a human readable description of the active provider plugin, or NULL.
 */
function ding_provider_description($type) {
  $plugin = _ding_provider_get_plugin($type);
  if ($plugin) {
    return _ding_provider_plugin_description($plugin);
  }
  return NULL;
}

/**
 * Invoke a provider hook.
 */
function ding_provider_invoke() {
  $args = func_get_args();
  $type = array_shift($args);
  $hook = array_shift($args);

  $plugin = _ding_provider_get_plugin($type);
  if ($plugin) {
    $function = ding_provider_plugin_load_function($type, $plugin['name'], $hook);
    // CTools only returns a name if the function exists.
    if ($function) {
      return call_user_func_array($function, $args);
    }
    // Trigger an error. This might be a module attempting to use a wrong
    // hook, or an improperly implemented plugin. In either case, it's
    // programmer error.
    trigger_error(t('Ding @type provider plugin %plugin (%module module) does not implement %function', array('@type' => $type,'%plugin' => $plugin['name'], '%function' => $hook, '%module' => $plugin['module'])), E_USER_ERROR);
  }
  else {
    watchdog('ding_provider', 'Provider module not configured for provider type %type.', array('%type' => $type), WATCHDOG_ERROR);
  }
}

/**
 *
 */
function ding_provider_get_form($type, $form_name) {
  $args = func_get_args();
  $type = array_shift($args);

  $plugin = _ding_provider_get_plugin($type);
  if ($plugin) {
    $form_id = ding_provider_plugin_load_function($type, $plugin['name'], $form_name);
    // CTools only returns a name if the function exists.
    if ($form_id) {
      $args[0] = $form_id;
      return call_user_func_array('drupal_get_form', $args);
    }
    // Trigger an error. This might be a module attempting to use a wrong
    // hook, or an improperly implemented plugin. In either case, it's
    // programmer error.
    trigger_error(t('Ding provider plugin %plugin (%module module) does not implement form %form_name', array('%plugin' => $plugin['name'], '%form_name' => $form_name, '%module' => $plugin['module'])), E_USER_ERROR);
  }
  else {
    watchdog('ding_provider', 'Provider module not configured for provider type %type.', array('%type' => $type), WATCHDOG_ERROR);
  }
}

/**
 * Works like ctools_plugin_load_function(), but filters out unsupported
 * version plugins.
 */
function ding_provider_plugin_load_function($type, $id, $function_name) {
  ctools_include('plugins');
  $function = NULL;
  $plugin = _ding_provider_filter_version(ctools_get_plugins('ding_provider', $type, $id));
  if ($plugin) {
    $function = ctools_plugin_get_function($plugin, $function_name);
  }
  return $function;
}

// === INTERNAL FUNCTIONS ===

/**
 * Filter out plugin if it's version is not supported.
 */
function _ding_provider_filter_version($plugin) {
  if (!isset($plugin['version']) || !isset($plugin['plugin type'])) {
    return FALSE;
  }

  $types = _ding_provider_types();
  $type = $types[$plugin['plugin type']];
  // Only process if version is between minimum and current, inclusive.
  if ($plugin['version'] >= $type['minimum version'] && $plugin['version'] <= $type['current version']) {
    return $plugin;
  }
  return FALSE;
}

/**
 * Get plugin description from plugin.
 */
function _ding_provider_plugin_description($plugin) {
  return t('@description (provided by @module module)', array('@description' => $plugin['description'], '@module' => $plugin['module']));
}

/**
 * Find the plugin responsible for a provider type.
 *
 * Returns the plugin, NULL or FALSE. The difference between NULL and FALSE is
 * that NULL means no plugins found, and FALSE that there was more than one
 * candidate (for those callers who care).
 */
function _ding_provider_get_plugin($type) {
  $plugins = _ding_provider_get_plugins($type);
  if (sizeof($plugins) == 1) {
    $plugin = array_shift($plugins);
    // Ensure that the defining module is enabled (it might not be).
    if (module_exists($plugin['module'])) {
      return $plugin;
    }
  }
  return sizeof($plugins) == 0 ? NULL : FALSE;
}

/**
 * Finds all plugins available for a provider type.
 */
function _ding_provider_get_plugins($type) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('ding_provider', $type);
  // Filter out versions not supported.
  return array_filter($plugins, '_ding_provider_filter_version');
}
