<?php

/**
 * Implementation of hook_menu().
 */
function ding_user_menu() {
  $items = array();

  $items['admin/user/ding_user'] = array(
    'title' => 'Ding! user settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ding_user.admin.inc',
  );

  $items['user/%user/change_pass'] = array(
    'title' => 'Change password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_forms_change_pass', 1),
    'access callback' => 'ding_user_forms_access',
    'access arguments' => array('change_pass', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_user.forms.inc',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function ding_user_menu_alter(&$items) {
  // Change the password recovery page to be a callback, not shown in menus.
  $items['user/password']['type'] = MENU_CALLBACK;

  // Change the title of the view profile tab.
  $items['user/%user/view']['title'] = 'Profile';

  // Change the title of the user edit tab.
  $items['user/%user_category/edit']['title'] = 'Settings';
}

/**
 * Implementation of hook_user().
 */
function ding_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'validate':
      // If email is already used, fudge around Drupals uniqueness validator.
      // Logic stolen from sharedemail.
      if (isset($edit['mail'])) {
        $uid = db_result(db_query("SELECT uid FROM {users} WHERE uid <> %d AND LOWER(mail) = LOWER('%s')", $account->uid, $edit['mail']));
        if (!empty($uid)) {
          $edit['mail']= 'ding_user_'. $edit['mail'];
        }
      }
      break;
    case 'submit':
      if (isset($edit['mail']) && strpos($edit['mail'], 'ding_user_') == 0) {
        $edit['mail'] = str_replace('ding_user_', '', $edit['mail']);
      }
      break;
    case 'login':
      // When logging in a returning normal user, update its display name if
      // authenticating module set it.
      if (isset($account->display_name) && (!isset($account->has_secure_role) || !$account->has_secure_role)) {
        db_query("UPDATE {ding_user} SET display_name = '%s' WHERE uid = %d;", $account->display_name, $account->uid);
      }
      // Let auth modules set auth_email, and update Drupal
      // users mail if it's different
      if (isset($account->auth_mail) && (!isset($account->has_secure_role) || !$account->has_secure_role)) {
        $mail = $account->auth_mail;
        // We might want to improve on this logic later.
        if (is_array($mail)) {
          $mail = array_shift($mail);
        }
        if ($mail != $account->mail) {
          db_query("UPDATE {users} SET mail = '%s' WHERE uid = %d;", $mail, $account->uid);
          $account->mail = $mail;
        }
        unset($account->auth_mail); // Shouldn't be saved by
                                    // user_save, but we remove it for
                                    // good measure.
      }
      break;
    case 'form':
      $form = array();

      if ($account->has_secure_role || user_access('administer users'))  {
        $form['account']['display_name'] = array(
          '#type' => 'textfield',
          '#title' => t('Display name'),
          '#description' => t('Profile name as presented to the site users. Library transactions will still use your full name as provided by CPR.'),
          '#required' => TRUE,
          '#default_value' => $account->display_name,
          '#weight' => -1,
        );
      }
      return $form;
    case 'register':
      $form = array();

      $form['display_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Display name'),
        '#description' => t('Profile name as presented to the site users. Library transactions will still use your full name as provided by CPR.'),
        '#required' => TRUE,
        '#default_value' => $account->display_name,
        '#weight' => -11,
      );

      return $form;
    case 'insert':
      if (strpos($user->mail, 'sharedemail_') == 0) {
        $realmail = str_replace('ding_user_', '', $mail);
        db_query("UPDATE {users} SET mail = '%s' WHERE uid = '%d'", $realmail, $user->uid);
        $user->mail = $realmail;
      }

      db_query("INSERT INTO {ding_user} (uid, pass, display_name) VALUES (%d, '%s', '%s');", $account->uid, user_hash_password($edit['pass']), check_plain($edit['display_name']));

      // According to hook_user docs, we should set the values we save
      // to NULL.
      $edit['display_name'] = NULL;
      break;
    case 'update':
      if (isset($edit['mail']) && strpos($edit['mail'], 'ding_user_') == 0) {
        $edit['mail'] = str_replace('ding_user_', '', $edit['mail']);
      }
      if (isset($edit['display_name']) && !is_null($edit['display_name'])) {
        if ($account->secure_pass === FALSE) {
          db_query("INSERT INTO {ding_user} (uid, display_name) VALUES (%d, '%s');", $account->uid, check_plain($edit['display_name']));
        }
        elseif ($account->display_name != $edit['display_name']) {
          db_query("UPDATE {ding_user} SET display_name = '%s' WHERE uid = %d;", check_plain($edit['display_name']), $account->uid);
        }

        // According to hook_user docs, we should set the values we save
        // to NULL.
        $edit['display_name'] = NULL;
      }
      break;
    case 'load':
      if ($account->uid) {
        if ($account->uid == 1 || ding_user_has_secure_role($account)) {
          $account->has_secure_role = TRUE;
        }
        else {
          $account->has_secure_role = FALSE;
        }

        $ding_user_data = db_fetch_array(db_query("SELECT pass, display_name FROM {ding_user} WHERE uid = %d LIMIT 1;", $account->uid));

        if ($ding_user_data) {
          $account->secure_pass = $ding_user_data['pass'];
          $account->display_name = $ding_user_data['display_name'];
        }
        else {
          // secure_pass = FALSE indicates that user doesn't have a row
          // in {ding_user}.
          $account->secure_pass = FALSE;
        }
      }
      break;
    case 'delete':
      db_query('DELETE FROM {ding_user} WHERE uid=%d', $account->uid);
      break;
    case 'view':
      if (isset($account->display_name) && !empty($account->display_name)) {
        drupal_set_title(check_plain($account->display_name));
      }
      $account->name = $account->display_name;

      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function ding_user_perm() {
  return array(
    'change other userâ€™s passwords',
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ding_user_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_views_api().
 */
function ding_user_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'ding_user') .'/views',
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function ding_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // If we have secure pages enabled, use its url function to
      // generate a secure URL for logging in.
      $url_function = (function_exists('securepages_url')) ? 'securepages_url' : 'url';

      // Set the POST callback to point to the main user login page to
      // avoid caching issues.
      $form['#action'] = $url_function('user/login', array('query' => drupal_get_destination()));

      // Replace Drupal's standard user/pass authentication with our own.
      $key = array_search('user_login_authenticate_validate', $form['#validate']);
      $form['#validate'][$key] = 'ding_user_login_validate';

      // Remove the standard user login links.
      unset($form['links']);
      break;
    case 'comment_form':
      $account = user_load($GLOBALS['user']->uid);
      $form['_author']['#value'] = (!empty($account->display_name)) ? $account->display_name : $account->name;
      break;
    case 'user_profile_form';
      global $user;
      // Strip all but account form elements from profile form for normal library users
      if (!ding_user_has_secure_role($user)) {
        // These elements we keep:
        $form_elements = array(// Required Drupal from elements
                               'form_id', 'form_build_id', 'form_token', 'submit',
                               // Account form elements
                               'account' => array('mail', 'alma_user_phone'), '_account', 'alma_user_patron_info');

        foreach (element_children($form) as $element) {
          if (!in_array($element, $form_elements) && !is_array($form_elements[$element])) {
              $form[$element]['#type'] = 'value';
          } else {
            // Nested form elements means that we keep elements in fieldsets
            foreach (element_children($form[$element]) as $child_element) {
              if (!in_array($child_element, $form_elements[$element])) {
                $form[$element][$child_element]['#type'] = 'value';
              }
            }
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_mail_alter().
 *
 * The comment_notify module doesn't support tokens, so we have this
 * hack to get display_name in. We'll probably find another
 * notification module later.
 */
function ding_user_mail_alter($message) {
  if ($message['id'] = 'comment_notify-comment_notify_mail') {
    // Not perfect, but it'll do...
    $reg_exp = '/[a-z0-9]+@[a-z0-9_]+/i';
    $message['subject'] = preg_replace_callback($reg_exp, '_ding_user_replace_callback', $message['subject']);
    $message['body'] = preg_replace_callback($reg_exp, '_ding_user_replace_callback', $message['body']);
  }
}

function _ding_user_replace_callback($matches) {
  $uid = db_result(db_query("SELECT uid FROM {authmap} WHERE authname = '%s'", $matches[0]));
  if ($uid) {
    $account = user_load(array('uid' => $uid));
    if ($account->display_name) {
      return $account->display_name;
    }
  }
  return $matches[0];
}

/**
 * User login validation.
 *
 * Serves as a replacement of user_login_authenticate_validate, using
 * our own password table instead of Drupal's user table.
 */
function ding_user_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    // empty user name or password makes little sense to try and validate.
    return;
  }

  $account = user_load(array('name' => $form_state['values']['name'], 'status' => 1));

  if ($account && ding_user_check_password($form_state['values']['pass'], $account)) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
  }
}

/**
 * Helper function to check if user has a secure role.
 *
 * @param object $account
 *    A Drupal user object.
 * @return boolean
 *    Boolean indicating that user has a secure role.
 */
function ding_user_has_secure_role($account) {
  if ($account->uid == 1) {
    return TRUE;
  }
  return array_intersect_key($account->roles, variable_get('ding_user_secure_roles', array()));
}

/**
 * Access control for the forms we provide.
 *
 * @param string $name
 *    The form name.
 * @param object $account
 *    The user account.
 * @return boolean
 *    If access was allowed.
 */
function ding_user_forms_access($name, $account) {
  switch ($name) {
    case 'change_pass':
      // Only accounts with a secure role have admin passwords.
      if ($account->uid != 1 && !$account->has_secure_role) {
        return FALSE;
      }
      // Everyone is allowed to change their own password.
      elseif ($GLOBALS['user']->uid == $account->uid) {
        return TRUE;
      }
      // Users with the right permissions is allowed to change the
      // password for anyone but uid=1.
      elseif ($account->uid != 1 && user_access('change other userâ€™s passwords')) {
        return TRUE;
      }
      break;
  }
}

/**
 * Check whether a plain text password matches a stored hashed password.
 *
 * Reimplementation of Drupal 7's user_check_password.
 *
 * @param string $password
 *    A plain-text password
 * @param object $account
 *    A user object with at least the secure_pass value.
 * @return boolean
 *    TRUE or FALSE.
 */
function ding_user_check_password($password, $account) {
  $hash = _password_crypt($password, $account->secure_pass);
  return ($hash && $account->secure_pass == $hash);
}
