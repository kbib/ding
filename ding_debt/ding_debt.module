<?php

// $Id$

/**
 * Implementation of hook_requirements().
 */
function ding_debt_requirements($phase) {
  $requrements = array();
  if ($phase == 'runtime') {
    $debt_provider = ding_provider_description('debt');

    $requrements['ding_debt'] = array(
      'title' => t('Ding debt'),
      'severity' => $debt_provider ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
      'value' => $debt_provider,
      'description' => $debt_provider ? t('OK'): t('No debt provider active.'),
    );
  }

  return $requrements;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_debt_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_debt_theme($existing, $type, $theme, $path) {
  return array(
    'ding_debt_list_form' => array(
      'arguments' => array('form' => NULL),
      // 'file' => 'ding_library_user.theme.inc',
    ),
  );
}

/**
 *
 */
function _ding_debt_list_get_total($debts) {
  $total = 0;
  foreach ($debts as $debt) {
    // TODO: bcadd?
    $total += $debt['amount'];
  }
  return $total;
}

/**
 * Debts details form.
 */
function ding_debt_list_form(&$form_state, $account, $debts) {
  $form = array();

  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  $form['debts'] = array(
    '#type' => 'value',
    '#value' => $debts,
  );

  $form['total'] = array(
    '#type' => 'value',
    '#value' => _ding_debt_list_get_total($debts),
  );

  $form['selected'] = array(
    '#tree' => TRUE,
  );

  foreach ($debts as $debt) {
    if ($debt['payable']) {
      $form['selected'][$debt['id']] = array(
        '#type' => 'checkbox',
        '#return_value' => $debt['id'],
      );
    }
  }

  return $form;
}

/**
 * Validation for debts details form.
 */
function ding_debt_list_form_validate($form, &$form_state) {
  $selected_debts = array_keys(array_filter($form_state['values']['selected']));

  if (empty($selected_debts)) {
    form_set_error('debts', t('Please select one or more debts to pay.'));
  }
  $form_state['values']['selected_debts'] = $selected_debts;

  //Calculate a new total based on the selected debts
  $total = 0.0;
  foreach ($selected_debts as $debt_id) {
    $total += (float) $form_state['values']['debts'][$debt_id]['amount'];
  }

  if ($total <= 0.0) {
    form_set_error('debts', t('Payment must be larger than zero.'));
  }
  
  $form_state['values']['total'] = $total;
}

/**
 * Theming of debt details form.
 */
function theme_ding_debt_list_form($form) {
  $date_format = variable_get('date_format_date_short', 'Y-m-d');
  $header = array(
    t('Select'),
    t('Note'),
    t('Date'),
    t('Amount'),
  );

  $colgroups = array(
    array(
      array(
        'class' => 'col-selection',
      ),
      array(
        'class' => 'col-note',
      ),
      array(
        'class' => 'col-date',
      ),
      array(
        'class' => 'col-amount',
      ),
    ),
  );

  $rows = array();
  foreach ($form['debts']['#value'] as $key => $data) {
    $rows[$data['id']] = array(
      drupal_render($form['selected'][$data['id']]),
      array(
        'class' => 'note',
        'data' => $data['display_title']
      ),
      array(
        'class' => 'date',
        'data' => ding_library_user_format_date($data['date'], $date_format),
      ),
      array(
        'class' => 'amount',
        'data' => $data['amount'],
      ),
    );
  }

  $output = theme('table', $header, $rows, array('colgroups' => $colgroups));
  $output .= drupal_render($form);
  return $output;
}
