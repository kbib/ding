<?php
// $Id$

// Default interest period is ~six months.
// TODO: move to ding_reservation
define('DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD', 183);

/**
 * Implementation of hook_menu().
 */
function ding_library_user_menu() {
  $items = array();

  $items['admin/settings/ding/ding_library_user'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_library_user_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_library_user.admin.inc',
  );

  $items['user/%user/authenticate'] = array(
    'title' => 'Please authenticate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_library_user_authenticate_form', 1),
    'access callback' => 'ding_library_user_forms_access',
    'access arguments' => array('ding_library_authenticate', 1),
    'type' => MENU_CALLBACK,
    'file' => 'ding_library_user.forms.inc',
  );

  $items['user/%user/change_pin'] = array(
    'title' => 'Change pin code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_library_user_change_password_form', 1),
    'access callback' => 'ding_library_user_forms_access',
    'access arguments' => array('change_pin', 1),
    'type' => MENU_CALLBACK,
    'file' => 'ding_library_user.forms.inc',
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function ding_library_user_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'account' => array(
        'info' => t('Library account/login'),
        'cache' => BLOCK_NO_CACHE,
        'status' => 1,
        'region' => 'account',
      ),
    );
  }
  elseif ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      jquery_ui_add('ui.dialog');
      jquery_ui_theme_load();
      drupal_add_js(drupal_get_path('module', 'ding_library_user') . '/js/ding_library_user.login.js');
      $block['content'] = drupal_get_form('user_login_block');
    }
    else {
      $status = ding_library_user_get_status($GLOBALS['user'], FALSE);
      $block['content'] = theme('ding_library_user_status_block', $status);
    }

    return $block;
  }
}

/**
 * Implementation of hook_user().
 */
function ding_library_user_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      if ($account->uid == $user->uid) {
        $account->content['summary']['#access'] = FALSE;
        $account->content['personal_info'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('Your profile'),
        );

        // I know this is not pretty, should be refactored to something more
        // like standard profile view.
        $account->content['personal_info']['vcard'] = array(
          '#value' => theme('ding_library_user_personal_info', $account, NULL),
        );

      }
      break;
  }
}

/**
 * Implementation of hook_cron().
 *
 * Delete credentials after a while.
 */
function ding_library_user_cron() {
  $expire_time = $_SERVER['REQUEST_TIME'] - variable_get('ding_library_user_credential_cache_duration', 1800);
  $res = db_query("SELECT sid, session, timestamp FROM {sessions} WHERE timestamp < %d", $expire_time);
  // As the only PHP functions that reads and writes the
  // almost-but-not-quite-serialized-data format of sessions does it
  // to/from the current session, we're using our own session as a
  // scratchpad. We're not bothering to restore the old session, as
  // we're a cron job, and cron jobs shouldn't use sessions.

  // Make sure we don't accidentally create a session.
  session_save_session(FALSE);
  while ($row = db_fetch_object($res)) {
    // Clear out any existing values (not that there should be any, but..).
    session_unset();
    session_decode($row->session);
    if (isset($_SESSION['ding_library_user_creds'])) {
      unset($_SESSION['ding_library_user_creds']);
      $new_session = session_encode();
      db_query("UPDATE {sessions} SET session = '%s' WHERE sid = %d AND timestamp = %d", $new_session, $row->sid, $row->timestamp);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_library_user_theme($existing, $type, $theme, $path) {
  return array(
    'ding_library_user_status_block' => array(
      'arguments' => array(
        'user_status' => NULL,
      ),
      'template' => 'ding_library_user_status_block',
      'file' => 'ding_library_user.theme.inc',
    ),
    'ding_library_user_personal_info' => array(
      'arguments' => array(
        'account' => NULL,
        'library_user_data' => NULL,
      ),
      'template' => 'ding_library_user_personal_info',
      'file' => 'ding_library_user.theme.inc',
      'path' => drupal_get_path('module', 'ding_library_user'),
    ),
    'ding_library_user_record_list' => array(
      'arguments' => array(
        'provider_type' => NULL,
        'records' => array(),
      ),
      'file' => 'ding_library_user.theme.inc',
    ),
    'ding_library_user_loan_list_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ding_library_user.theme.inc',
    ),
    'ding_library_user_list_item' => array(
      'arguments' => array('provider_type' => NULL, 'item' => NULL),
      'template' => 'ding-library-user-list-item',
      'file' => 'ding_library_user.theme.inc',
    ),
    'ding_library_user_list_item_image' => array(
      'arguments' => array('provider_type', 'item' => NULL, $preset = NULL),
      'file' => 'ding_library_user.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ding_library_user_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ding_library_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function ding_library_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Add our own validation handler, before the default Drupal login
      // validator.
      array_splice($form['#validate'], array_search('user_login_authenticate_validate', $form['#validate']), 0, 'ding_library_user_user_login_validate');
      // Add our own submit handler.
      $form['#submit'][] = 'ding_library_user_login_submit';

      // Remove the standard user login links.
      unset($form['links']);
      break;
    case 'ding_library_admin_settings_main_form':
      // Since we're adding an option to the form, the placeholder is no
      // longer needed.
      unset($form['placeholder']);

      $form['ding_library_user_cancel_fetchable_reservable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow cancellation of reservations ready for pickup?'),
        '#description' => t('If enabled, this will allow users that have reservations ready for pick-up to cancel those reservations. It does not affect reservations that are not ready for pick-up.'),
        '#default_value' => variable_get('ding_library_user_cancel_fetchable_reservable', TRUE),
      );
      break;
    case 'contact_mail_page':
    	//Alter the name field on contact form to use the display_name value
    	global $user;

    	// Force a user_load hoping that modules will populate the display_name vaue
    	$args = array();
    	user_module_invoke('load', $args, $user);

    	$form['name']["#default_value"] = (isset($user->display_name) && $user->display_name) ? $user->display_name : $user->name;
    	break;
  }
}

/**
 * Authenticate current user with backend.
 *
 * Allows for further querying the provider for data. The provider
 * user is not bound to the current user. If the current user is the
 * anonymous user (as is the case in cron jobs and XMLRPC calls), you
 * *must* call session_save_session(FALSE) to ensure that the
 * credentials is not saved in the session.
 *
 * @param string $name
 *   Username.
 * @param string $pass
 *   Password.
 *
 * @return boolean
 *   Whether the authentication was successful.
 */
function ding_library_user_authenticate_user($name, $pass) {
  global $user;
  $auth_res = ding_provider_invoke('user', 'authenticate', $name, $pass);

  if (!is_array($auth_res) || !isset($auth_res['result'])) {
    watchdog('ding_library_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
    return;
  }

  if ($auth_res['result']) {
    if (isset($auth_res['creds'])) {
      $_SESSION['ding_library_user_creds'][$user->uid] = $auth_res['creds'];
    }
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 *
 */
function ding_library_user_default_authname($name) {
  return md5(drupal_get_private_key() . $name) . '@ding_library_user';

}

/**
 * Validation handler for the login form.
 */
function ding_library_user_user_login_validate($form, &$form_state) {
  global $user;
  $auth_res = ding_provider_invoke('user', 'authenticate', $form_state['values']['name'], $form_state['values']['pass']);

  if (!is_array($auth_res) || !isset($auth_res['result'])) {
    watchdog('ding_library_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
    return;
  }

  if ($auth_res['result']) {
    if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
      // If provider supplied an authname, use it.
      $auth_name = $auth_res['authname'];
    }
    else {
      // Else use a standard authname.
      $auth_name = ding_library_user_default_authname($form_state['values']['name']);
    }
    // This sets the proper global $user.
    user_external_login_register($auth_name, 'ding_library_user');

    // Let authenticate module provide some properties for the $user
    // object. Thus they can set properties that gets used in
    // hook_user('login').
    if (isset($auth_res['user'])) {
      foreach ($auth_res['user'] as $key => $value) {
        $user->$key = $value;
      }
    }

    // Finalize login.
    user_authenticate_finalize($form_state['values']);

    // user_authenticate_finalize above just regenerated the session, so we've
    // waited until now to stuff things in it.
    if (isset($auth_res['creds'])) {
      $_SESSION['ding_library_user_creds'][$user->uid] = $auth_res['creds'];
    }
    if (ding_provider_supports('user', 'authenticate finalize')) {
      ding_provider_invoke('user', 'authenticate finalize', $user);
    }
  }
  else {
    if (isset($auth_res['messages'])) {
      foreach ($auth_res['messages'] as $message) {
        if (is_array($message)) {
          list($message, $type) = $message;
        } else {
          $type = 'warning';
        }
        drupal_set_message($message, $type);
      }
    }
  }
}

/**
 * Submit handler for the login form.
 *
 * Redirect user to a configured page on login.
 */
function ding_library_user_login_submit($form, &$form_state) {
  $form_state['redirect'] = variable_get('ding_library_user_login_destination', '<front>');
}

/**
 * Access control for the forms we provide.
 *
 * @param string $name
 *    The form name.
 * @param object $account
 *    The user account.
 * @return boolean
 *    If access was allowed.
 */
function ding_library_user_forms_access($name, $account) {
  switch ($name) {
    case 'ding_library_authenticate':
    case 'change_pin':
    case 'edit_contact_info':
      if ($GLOBALS['user']->uid == $account->uid) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * Get provider credentials for user.
 */
function ding_library_user_get_credentials($account) {
  // See if we have credentials for the given user in the session.
  if ($_SESSION['ding_library_user_creds'][$account->uid]) {
    return $_SESSION['ding_library_user_creds'][$account->uid];
  }
  return DING_PROVIDER_AUTH_REQUIRED;
}

/**
 * Ensure that the user is authenticated.
 *
 * Will redirect to the authentication page, and return the user to
 * the current path if necessary.
 */
function ding_library_user_required() {
  global $user;
  if (!ding_provider_invoke('user', 'logged in', $user)) {
    // If destination is set, create a new one embedding the old, and
    // unset destination, so drupal_goto wont go to the old
    // destination.
    if (isset($_REQUEST['destination'])) {
      $path = isset($_GET['q']) ? $_GET['q'] : '';
      $query = drupal_query_string_encode($_GET, array('q'));
      if ($query != '') {
        $path .= '?'. $query;
      }
      $new_destination = 'destination='. urlencode($path);
      unset($_REQUEST['destination']);
      // first check wether a drupal user is actually logged in
      if(!$user->uid){
        drupal_goto('user/login', $new_destination);
      }
      drupal_goto('user/' . $user->uid . '/authenticate', $new_destination);
    }
  }
}

/**
 * Get library user status.
 *
 * @param object $account
 *    The user we're getting credentials for.
 * @param boolean $redirect
 *    Whether to redirect and collect credentials from the user if
 *    they're not currently available. Default is TRUE.
 * @return mixed
 *    Returns array of user status if successful, FALSE if not.
 */
function ding_library_user_get_status($account, $redirect=TRUE) {
  static $status;
  if (!isset($status)) {
    $status = array();
  }

  // Return data from static variable cache, if available.
  if (isset($status[$account->uid])) {
    return $status[$account->uid];
  }
  else {
    // Generate the user status by querying the library system for different
    // details. Remember that only non-sensitive information should
    // be available in the status, since that is cached and
    // available without authentication as long as the user's
    // session lasts.
    $data = array();

    if (ding_provider_invoke('user', 'logged in', $account)) {
      $reservations = ding_provider_invoke('reservation', 'list', $account);
      $loans = ding_provider_invoke('loan', 'get loans', $account);
      $data['loan_overdue_count'] = 0;

      if ($loans != DING_PROVIDER_AUTH_REQUIRED) {
        $data['loan_count'] = count($loans);
        foreach ($loans as $loan) {
          if ($loan['due_date'] < date('Y-m-d', $_SERVER['REQUEST_TIME'])) {
            $data['loan_overdue_count']++;
          }
        }
      }

      if ($reservations != DING_PROVIDER_AUTH_REQUIRED) {
        $data['reservation_count'] = count($reservations);
      }
      $data['status_available'] = TRUE;
    }
    else {
      $data['status_available'] = FALSE;
    }
    $status[$account->uid] = $data;
    return $data;
  }
  return FALSE;
}

/**
 * Format an ISO 8601 date using a date format string.
 *
 * @param string $datestring
 *    Date in ISO 8601 format (eg. 2010-04-10).
 * @param string $date_format
 *    The format (in date() style) to use when formatting the date.
 * @return string
 *    Formatted date or original $datestring on failure.
 */
function ding_library_user_format_date($datestring, $date_format) {
  if ($datestring) {
    $timestamp = strtotime($datestring);

    if ($timestamp > 1) {
      // Adjust timezone as the original string didn't have one. This
      // ensures that it is printed in the same zone as PHP assumes
      // the string to be in, avoiding shifting the date to a previous
      // day due to daylight saving time.
      return format_date($timestamp, 'custom', $date_format, date_offset_get(new DateTime($datestring)));
    }
  }
  return $datestring;
}
