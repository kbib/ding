<?php
// $Id$

// General functions.

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function ding_provider_example_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ding_provider') {
    return "plugins/$plugin";
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the login form to disable the standard Drupal username/password
 * combination and provide our own fields instead.
 */
function ding_provider_example_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    case 'ding_library_user_authenticate_form':
      // Since the login name can be a user's CPR-number, that too is hidden.
      $form['name']['#type'] = 'password';
    break;
  }
}

// User related functions.

// Loan related functions.


// Reservation related functions.

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add options and buttons to the reservation list.
 */
function ding_provider_example_form_ding_reservation_list_form_alter(&$form, $form_state) {
  $form['options']['new_expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Valid to'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
  );

  $form['options']['new_pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('New pickup branch'),
    '#options' => array(
      1 => 'Somewhere',
      2 => 'Somewhere else',
    ),
  );

  $form['buttons']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes for selected reservations'),
    '#attributes' => array('class' => 'update-button'),
    '#validate' => array('ding_provider_example_ding_reservation_list_form_validate'),
    '#submit' => array('ding_provider_example_ding_reservation_list_form_update'),
  );

  $form['buttons']['remove'] = array(
    '#type' => 'submit',
    '#value' => t('Delete selected reservations'),
    '#attributes' => array('class' => 'cancel-button'),
    '#submit' => array('ding_provider_example_ding_reservation_list_form_remove'),
  );

}

/**
 * Form validation function.
 */
function ding_provider_example_ding_reservation_list_form_validate($form, $form_state) {
  $reservations = $form_state['values']['reservations'];
  foreach (array_filter($form_state['values']['selected']) as $id) {
    // Detect fetable reservations...
    if (($reservations[$id]['status'] == 'fetchable')) {
      if (!empty($form_state['values']['new_expiry'])) {
        form_error($form['selected'][$id], t('You can not change expiry on reservations which are ready for pick up'));
      }
    }
    // Something like it to check that pickup_branch is not changed either.
  }

  if (!empty($form_state['values']['new_expiry'])) {
    list($year, $month, $day) = explode('-', trim($form_state['values']['new_expiry']));
    if (!checkdate($month, $day, $year)) {
      form_error($form['options']['new_expiry'], t('Invalid date'));
    }

    $timestamp = strtotime($form_state['values']['new_expiry']);

    if ($timestamp <= $_SERVER['REQUEST_TIME']) {
      form_error($form['options']['new_expiry'], t('Date must be later than today.'));
    }
    else {
      form_set_value($form['options']['new_expiry'], format_date($timestamp, 'custom', 'Y-m-d'), $form_state);
    }
  }
}

/**
 * Submit function.
 *
 * Updates selected reservations.
 */
function ding_provider_example_ding_reservation_list_form_update($form, $form_state) {
  $reservations_ids = array_filter($form_state['values']['selected']);
  // Here you would do something like:
  //ding_provider_example_reservation_update($reservations_ids, $form_state['values']['options']);
  dpm($reservations_ids);
}

// Cart reservation support.

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add options and buttons to the cart.
 */
function ding_provider_example_form_ding_cart_list_form_alter(&$form, &$form_state) {

  $interest_period = (isset($account->interest_period) && $account->interest_period > 10) ? $account->interest_period : DING_LIBRARY_USER_DEFAULT_INTEREST_PERIOD;

  $form['options']['expiry'] = array(
    '#type' => 'date_popup',
    '#title' => t('Not interested after'),
    '#date_format' => DATE_FORMAT_DATE,
    '#date_year_range' => '-0:+2',
    '#default_value' => date('Y-m-d', $_SERVER['REQUEST_TIME'] + $interest_period * 86400),
  );

  $form['options']['pickup_branch'] = array(
    '#type' => 'select',
    '#title' => t('Pickup branch'),
    '#options' => array(
      1 => 'Somewhere',
      2 => 'Somewhere else',
    ),
  );

  $form['reserve'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve selected'),
    '#attributes' => array('class' => 'reserve-button'),
    '#op' => 'reserve',
    '#submit' => array('ding_provider_example_ding_cart_list_form_submit'),
  );
}

/**
 * Custom submit handler
 */
function ding_provider_example_ding_cart_list_form_submit($form, &$form_state) {
  foreach ($form_state['values']['selected'] as $local_id) {
    $reservation = ding_provider_invoke('reservation', 'create', $form_state['values']['account'], $local_id, array('valid_to' => $form_state['values']['expiry'], 'pickup_branch' => $form_state['values']['pickup_branch']));

    // If reservation was successful, remove the item from the cart.
    if ($reservation and $reservation != DING_PROVIDER_AUTH_REQUIRED) {
      db_query("DELETE FROM {ding_cart} WHERE uid = %d AND local_id = '%s';", $form_state['values']['account']->uid, $local_id);
    }
    else {
      drupal_set_message(t('Reservation of “@title” failed. It may be on your reservation list already.', array('@title' => $form['cart']['#value'][$local_id]['title'])), 'error');
    }
  }
}

// Booking related functions

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add options and buttons to the booking list.
 */
function ding_provider_example_form_ding_booking_list_form_alter(&$form, $form_state) {
}

// Debt related functions

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add options and buttons to the debt list.
 */
function ding_provider_example_form_ding_debt_list_form_alter(&$form, $form_state) {
  if (function_exists('ding_dibs_payment_prepare')) {
    $form['buttons']['pay'] = array(
      '#type' => 'submit',
      '#value' => t('Pay all'),
      '#attributes' => array('class' => 'update-button'),
      '#submit' => array('ding_provider_example_ding_debt_list_form_pay'),
    );
  }
}

/**
 * Submit handler.
 */
function ding_provider_example_ding_debt_list_form_pay($form, &$form_state) {
  $params = array(
    'customer_name' => "Anders And",
    'customer_city' => "Andeby",
    'customer_zipcode' => "1234",
  );
  $params['customer_address'] = 'ATT: Rip, Rap & Rup';
  $params['customer_address_2'] = "Paradisæblevej 113";
  $params['customer_email'] = "rrr@hotduck.com";
  $params['customer_phone'] = "42135";

  ding_dibs_payment_prepare($form_state['values']['total'], $params, 'ding_provider_example_debt_dibs_add_payment');
}

/**
 * Callback for payment processing.
 *
 * Remember that while the global user and session is the proper ones, they're
 * read-only due to implementation details.
 */
function ding_provider_example_debt_dibs_add_payment($transaction) {
  global $user;
  $creds = ding_library_user_get_credentials($user);
  // Tell some backend system that the payment has been approved.
}
